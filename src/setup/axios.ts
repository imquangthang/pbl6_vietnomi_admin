import axios from "axios";

const URL_API = "https://pbl6-vietnomi-be.onrender.com";

const instance = axios.create({
  baseURL: URL_API,
  timeout: 10000,
});

// H√†m x·ª≠ l√Ω l·ªói t·ª´ axios
const handleAxiosError = async (error: any) => {
  const status = error?.response?.status;
  const message = error?.message;
  const originalRequest = error.config;

  switch (status) {
    case 401:
      console.error("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      originalRequest._retry = true;
      try {
        // G·ªçi API refresh token
        const refreshResponse: any = await axios.post(
          URL_API + "/auth/refresh",
          { withCredentials: true },
        );

        const newAccessToken = refreshResponse.refreshToken;

        // L∆∞u token m·ªõi (v√≠ d·ª• localStorage)
        localStorage.setItem("token", newAccessToken);
        let user: any = localStorage.getItem("user");
        if (user) {
          user = JSON.parse(user);
          user.token = newAccessToken;
          localStorage.setItem("user", JSON.stringify(user));
        }

        // Update header cho request c≈©
        originalRequest.headers["Authorization"] = `Bearer ${newAccessToken}`;

        // Retry request c≈© v·ªõi token m·ªõi
        return instance(originalRequest);
      } catch (refreshError) {
        // N·∫øu refresh c≈©ng fail ‚Üí logout
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        window.location.href = "/login";
      }
      break;
    case 403:
      console.error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y.");
      window.location.href = "/login";
      break;
    default:
      if (message === "Network Error") {
        console.error(
          "üåê Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß. Ki·ªÉm tra m·∫°ng ho·∫∑c CORS.",
        );
      } else if (error.code === "ECONNABORTED") {
        console.error("H·∫øt th·ªùi gian k·∫øt n·ªëi t·ªõi m√°y ch·ªß.");
      } else {
        console.error(`L·ªói: ${message || "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh."}`);
      }
      break;
  }

  return Promise.reject(error);
};

// H√†m g·∫Øn interceptor cho instance
const applyInterceptors = (axiosInstance: typeof instance) => {
  axiosInstance.interceptors.request.use(
    (config) => {
      const token = localStorage.getItem("jwt");
      if (token) {
        config.headers["Authorization"] = `Bearer ${token}`;
      }
      return config;
    },
    (error) => Promise.reject(error),
  );

  axiosInstance.interceptors.response.use((response) => {
    try {
      return response.data;
    } catch (e) {
      console.error("L·ªói khi ƒë·ªçc response:", e, response);
      throw e;
    }
  }, handleAxiosError);
};

// √Åp d·ª•ng interceptor v√†o instance
applyInterceptors(instance);

// Export ƒë·ªÉ d√πng trong to√†n b·ªô project
export default instance;
